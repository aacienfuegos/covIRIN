#include "geometry.h"

CCollisionManager*  CGeometry::m_pcCollisionManager = NULL;

/******************************************************************************/
/******************************************************************************/

CGeometry::CGeometry(const char* pch_name) : 
    CSimObject(pch_name),
    m_fMass(0),
    m_fRotation(0)    
{
    m_vPosition.x = 0;
    m_vPosition.y = 0;
//  m_fPosX = 0;
//  m_fPosY = 0;
}

/******************************************************************************/
/******************************************************************************/

CGeometry::CGeometry(const char* pch_name, double f_pos_x, double f_pos_y, 
                     double f_rotation, double f_mass) : 
    CSimObject(pch_name),
    m_fMass(f_mass),
    m_fRotation(f_rotation)
{
    m_vPosition.x = f_pos_x;
    m_vPosition.y = f_pos_y;
}

/******************************************************************************/
/******************************************************************************/

CGeometry::~CGeometry()
{
    // Do nothing
}

/******************************************************************************/
/******************************************************************************/

void CGeometry::GetPosition(double* x, double* y)
{
    (*x) = m_vPosition.x;
    (*y) = m_vPosition.y;
 //(*x) = m_fPosX;
 //(*y) = m_fPosY;
}

/******************************************************************************/
/******************************************************************************/

double CGeometry::GetRotation()
{
    return m_fRotation;
}

/******************************************************************************/
/******************************************************************************/

void  CGeometry::SetMass(double f_mass)
{
    m_fMass = f_mass;
}

/******************************************************************************/
/******************************************************************************/

double CGeometry::GetMass()
{
    return m_fMass;
}

/******************************************************************************/
/******************************************************************************/

double CGeometry::SetRotation(double f_rotation)
{
    m_fRotation = f_rotation;

    return 0;
}

/******************************************************************************/
/******************************************************************************/

void CGeometry::SetPosition(double x, double y)
{
    m_vPosition.x = x;
    m_vPosition.y = y;
   // m_fPosX = x;
   // m_fPosY = y;
}

/******************************************************************************/
/******************************************************************************/

void CGeometry::SetPosition(dVector2 v)
{
    m_vPosition = v;
}

/******************************************************************************/
/******************************************************************************/

dVector2 CGeometry::GetPosition()
{
    return m_vPosition;
}

/******************************************************************************/
/******************************************************************************/

bool CGeometry::AreCollisionsOn()
{
    return m_pcCollisionManager != NULL;
   //return false;
}

/******************************************************************************/
/******************************************************************************/

CCollisionManager* CGeometry::GetCollisionManager()
{
    return m_pcCollisionManager;
}   

/******************************************************************************/
/******************************************************************************/

void CGeometry::SetCollisionManager(CCollisionManager* pc_collision_manager)
{
    if (m_pcCollisionManager != NULL && pc_collision_manager != NULL)
        {
        		printf("You are creating more than one collision managers!");
        		fflush(stdout);
        }

    m_pcCollisionManager = pc_collision_manager;
}

/******************************************************************************/
/******************************************************************************/
